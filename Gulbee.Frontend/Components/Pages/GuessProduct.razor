@page "/guess-product"
@rendermode InteractiveServer

@using Gulbee.Frontend.Clients
@using Gulbee.Frontend.Models
@using Gulbee.Frontend.Handlers
@inject ProductClient ProductClient

<PageTitle>Gulbee!</PageTitle>

@if(guessingHandler is null || guessingHandler.actualProduct is null || productGuess is null){
    <p>Loading...</p>
}
else{

    <div class="container d-flex flex-column h-100 justify-content-start" >
        <div class="row m-3">
            <div class="col-3"></div>
            <div class="col-6">
                <div class="d-flex justify-content-center ">
                    <div class="card w-75  ">
                        <div class="card-header gulbee-colors text-white">
                            <h4 class="card-title m-2 fs-2">Name: ??? @guessingHandler.actualProduct.Name</h4>
                            <h5 class="card-subtitle m-2 text-body-light fs-5">Category: @guessingHandler.actualProduct.Category</h5>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                            <li class="list-group-item fs-3">Kcal: @guessingHandler.actualProduct.Kcal</li>
                            <li class="list-group-item fs-3">Fat: @guessingHandler.actualProduct.Fat</li>
                            <li class="list-group-item fs-3">Carbo: @guessingHandler.actualProduct.Carbo</li>
                            <li class="list-group-item fs-3">Sugar: @guessingHandler.actualProduct.Sugar</li>
                            <li class="list-group-item fs-3">Proteins: @guessingHandler.actualProduct.Proteins</li>
                            <li class="list-group-item fs-3">Salt: @guessingHandler.actualProduct.Salt</li>
                            <li class="list-group-item fs-3">Fiber: @guessingHandler.actualProduct.Fiber</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row m-3">
            <div class="col-3"></div>
            <div class="col-6">
                <EditForm 
                    Model="@productGuess" 
                    OnValidSubmit="SubmitAsync" 
                    FormName="GuessProductForm"
                    Enhance>
                    <DataAnnotationsValidator />
                    <div class="d-flex flex-column align-items-center justify-content-center">
                        <div class="mb-3 w-75">
                            <InputText id="name" type="text" class="form-control form-control-lg" 
                                    @bind-Value="productGuess.Name" />
                            <ValidationMessage For="@(() => productGuess.Name)" class="text-danger" />
                        </div>
                        <div class="d-flex w-75 align-items-center justify-content-center">
                            <div class="col-7 m-2">
                                @if(guessingHandler.guessSuccess == true){
                                    <button class="w-100 text-center fs-2 p-3 px-4 fw-semibold rounded-pill shadow-lg text-nowrap"
                                        style="background-color: #5e0fdc; color: #38c907;"
                                        role="button"
                                        disabled>
                                        Well done!
                                    </button>
                                }
                                else if (guessingHandler.guessSuccess == false){
                                    <button class="w-100 text-center fs-2 p-3 px-4 fw-semibold rounded-pill shadow-lg text-nowrap"
                                        style="background-color: #5e0fdc; color: #cd0e2b;"
                                        role="button"
                                        disabled>
                                        Nope!
                                    </button>
                                }
                                else{ //null
                                    <button class="w-100 text-center fs-2 p-3 px-4 fw-semibold rounded-pill shadow-lg text-nowrap"
                                        style="background-color: #5e0fdc; color: #f6e0f5;"
                                        role="button">
                                        Guess that!
                                    </button>
                                }
                            </div>
                            <div class="col-5 m-2">
                                <div class="btn w-100 text-center fs-4 p-1 px-4 fw-semibold rounded-5 shadow-lg text-nowrap"
                                    style="background-color: #dc5e0f; color: #f6e0f5;"
                                    @onclick="GiveUp" >
                                    Give Up!
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
                
            </div>
        </div>
        
    </div>    
}

@code{
    GuessingHandler? guessingHandler;
    [SupplyParameterFromForm] private ProductGuess? productGuess { get; set; }
    protected async override Task OnInitializedAsync(){
        productGuess = new();
        guessingHandler = await GuessingHandler.CreateAsync(ProductClient);
    }
    private async Task SubmitAsync()
    {
        await guessingHandler!.Submit(productGuess);

    }    
    private async Task GiveUp()
    {
        await guessingHandler!.GiveUp();

    }  
}
