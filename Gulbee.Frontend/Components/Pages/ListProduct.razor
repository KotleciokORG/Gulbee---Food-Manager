@page "/list-product"
@using Gulbee.Frontend.Clients
@using Gulbee.Frontend.Models

@inject ProductClient ProductClient
@inject CategoryClient CategoryClient

@if (categoryList is null || productList is null){
    <p>Loading...</p>
}
else{
    <div class="container d-flex " >
        <div class="col-3"></div>
        <div class="col-6 m-4 d-flex flex-column justify-content-start">
            <table class="table table-striped table-dark">
                <thead>
                    <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Kcal</th>
                    <th scope="col">Category</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var product in productList){
                        <tr>
                            <td>@product.Name</td>
                            <td>@product.Kcal</td>
                            <td>@product.Category</td>
                        </tr>
                    }
                    
                </tbody>
            </table>

        </div>
        <div class="col-3 m-4 d-flex flex-column justify-content-start">
            <table class="table table-striped table-dark">
            <thead>
                <tr>
                    <th scope="col">Category Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var category in categoryList){
                    <tr>
                    <td>@category.Name</td>
                    </tr>
                }
            </tbody>
            </table>

        </div>

    </div>
}


@code{
    private Product[]? productList { get; set; }
    private Category[]? categoryList { get; set; }

    override protected async Task OnInitializedAsync(){
        productList = await ProductClient.GetProductsAsync();
        categoryList = await CategoryClient.GetCategoriesAsync();

        foreach(var product in productList){
            var cat = (categoryList.Where(c => c.Id == product.CategoryId).FirstOrDefault());
            ArgumentNullException.ThrowIfNull(cat);
            product.Category = cat.Name;
        } 
    }

}