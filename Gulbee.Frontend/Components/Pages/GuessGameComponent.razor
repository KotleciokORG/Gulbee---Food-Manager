@page "/guess-game"

@using Gulbee.Frontend.Clients
@using Gulbee.Frontend.Models
@using System.ComponentModel.DataAnnotations
@inject ProductClient ProductClient

<PageTitle>Gulbee!</PageTitle>

@if(product is null || productGuess is null){
    <p>Loading...</p>
}
else{

    <div class="container d-flex flex-column h-100 justify-content-start" >
        <div class="row m-3">
            <div class="column">
                <div class="d-flex flex-column justify-content-center align-items-center">
                    <span class="text-center display-5 p-3 px-4 fw-semibold rounded-pill shadow-lg"
                        style="background-color: #5e0fdc; color: #f6e0f5;">
                        Guess that product!
                    </span>
                    @if(guessSuccess is not null){
                        @if(guessSuccess == true){
                            <h5 class="text-center p-3 px-4 mt-2 fw-semibold rounded-pill shadow-lg bg-success">
                                Well done!
                            </h5>
                        }
                        else{
                            <h5 class="text-center p-3 px-4 mt-2 fw-semibold rounded-pill shadow-lg bg-danger">
                                Nope!
                            </h5>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="row m-3">
            <div class="column">
                <div class="d-flex justify-content-center ">
                    <div class="card my-3 w-25  ">
                        <div class="card-header gulbee-colors text-white">
                            <h4 class="card-title mb-0">Name: ??? @product.Name</h4>
                            <h5 class="card-subtitle mb-0 text-body-tertiary">Category: @product.Category</h5>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                            <li class="list-group-item">Kcal: @product.Kcal</li>
                            <li class="list-group-item">Fat: @product.Fat</li>
                            <li class="list-group-item">Carbo: @product.Carbo</li>
                            <li class="list-group-item">Sugar: @product.Sugar</li>
                            <li class="list-group-item">Proteins: @product.Proteins</li>
                            <li class="list-group-item">Salt: @product.Salt</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row m-3">
            <div class="column">
                <div class="d-flex justify-content-center">
                    <EditForm 
                        Model="@productGuess" 
                        OnValidSubmit="SubmitAsync" 
                        FormName="ProductForm"
                        Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div>
                            <label for="name" class="form-label">Your guess:</label>
                            <InputText id="name" type="text" class="form-control" 
                                       @bind-Value="productGuess.Name" />
                        </div>
                        <div>
                            <button class="btn btn-primary" role="button" type="submit">Submit</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        
    </div>    
}

@code{
    Random? rng;
    private Product? product;
    private int productCount;
    private bool? guessSuccess;
    [SupplyParameterFromForm] private ProductGuess? productGuess { get; set; }
    protected async override Task OnInitializedAsync(){
        rng = new Random();
        guessSuccess = null;
        productCount = await ProductClient.CountProductsAsync();
        product = await ProductClient.GetProductAsync(rng.Next(1, productCount));
        productGuess = new();
    }
    private async Task SubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(productGuess);
        ArgumentNullException.ThrowIfNull(product);
        ArgumentNullException.ThrowIfNullOrEmpty(productGuess.Name);
        ArgumentNullException.ThrowIfNullOrEmpty(productGuess.Name.Trim());

        if(productGuess.Name.ToLower().Trim() == product.Name || true){
           guessSuccess = true;
           await Task.Delay(3000);
           product = await ProductClient.GetProductAsync(rng!.Next(1, productCount));
        }
        else{
            guessSuccess = false;
            await Task.Delay(3000);
        }
        guessSuccess = null;
    }

    public class ProductGuess
    {
        [Required]
        [StringLength(20, ErrorMessage = "Name is too long.")]
        public string? Name { get; set; }
    }
}
